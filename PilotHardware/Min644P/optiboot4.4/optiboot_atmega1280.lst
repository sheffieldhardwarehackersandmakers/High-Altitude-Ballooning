
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  0001fc00  0001fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  2 .stab         00000bac  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a38  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
   1fc00:	11 24       	eor	r1, r1
   1fc02:	84 b7       	in	r24, 0x34	; 52
   1fc04:	14 be       	out	0x34, r1	; 52
   1fc06:	81 ff       	sbrs	r24, 1
   1fc08:	ff d0       	rcall	.+510    	; 0x1fe08 <appStart>
   1fc0a:	85 e0       	ldi	r24, 0x05	; 5
   1fc0c:	80 93 81 00 	sts	0x0081, r24
   1fc10:	82 e0       	ldi	r24, 0x02	; 2
   1fc12:	80 93 c0 00 	sts	0x00C0, r24
   1fc16:	88 e1       	ldi	r24, 0x18	; 24
   1fc18:	80 93 c1 00 	sts	0x00C1, r24
   1fc1c:	86 e0       	ldi	r24, 0x06	; 6
   1fc1e:	80 93 c2 00 	sts	0x00C2, r24
   1fc22:	80 e1       	ldi	r24, 0x10	; 16
   1fc24:	80 93 c4 00 	sts	0x00C4, r24
   1fc28:	8e e0       	ldi	r24, 0x0E	; 14
   1fc2a:	d8 d0       	rcall	.+432    	; 0x1fddc <watchdogConfig>
   1fc2c:	27 9a       	sbi	0x04, 7	; 4
   1fc2e:	26 e0       	ldi	r18, 0x06	; 6
   1fc30:	80 e3       	ldi	r24, 0x30	; 48
   1fc32:	9c ef       	ldi	r25, 0xFC	; 252
   1fc34:	31 e0       	ldi	r19, 0x01	; 1
   1fc36:	90 93 85 00 	sts	0x0085, r25
   1fc3a:	80 93 84 00 	sts	0x0084, r24
   1fc3e:	36 bb       	out	0x16, r19	; 22
   1fc40:	b0 9b       	sbis	0x16, 0	; 22
   1fc42:	fe cf       	rjmp	.-4      	; 0x1fc40 <main+0x40>
   1fc44:	1f 9a       	sbi	0x03, 7	; 3
   1fc46:	a8 95       	wdr
   1fc48:	21 50       	subi	r18, 0x01	; 1
   1fc4a:	a9 f7       	brne	.-22     	; 0x1fc36 <main+0x36>
   1fc4c:	88 24       	eor	r8, r8
   1fc4e:	99 24       	eor	r9, r9
   1fc50:	dd 24       	eor	r13, r13
   1fc52:	d3 94       	inc	r13
   1fc54:	e5 e0       	ldi	r30, 0x05	; 5
   1fc56:	ee 2e       	mov	r14, r30
   1fc58:	71 e1       	ldi	r23, 0x11	; 17
   1fc5a:	f7 2e       	mov	r15, r23
   1fc5c:	b3 d0       	rcall	.+358    	; 0x1fdc4 <getch>
   1fc5e:	81 34       	cpi	r24, 0x41	; 65
   1fc60:	89 f4       	brne	.+34     	; 0x1fc84 <main+0x84>
   1fc62:	b0 d0       	rcall	.+352    	; 0x1fdc4 <getch>
   1fc64:	89 83       	std	Y+1, r24	; 0x01
   1fc66:	c0 d0       	rcall	.+384    	; 0x1fde8 <verifySpace>
   1fc68:	89 81       	ldd	r24, Y+1	; 0x01
   1fc6a:	82 38       	cpi	r24, 0x82	; 130
   1fc6c:	19 f4       	brne	.+6      	; 0x1fc74 <main+0x74>
   1fc6e:	84 e0       	ldi	r24, 0x04	; 4
   1fc70:	a2 d0       	rcall	.+324    	; 0x1fdb6 <putch>
   1fc72:	9e c0       	rjmp	.+316    	; 0x1fdb0 <main+0x1b0>
   1fc74:	81 38       	cpi	r24, 0x81	; 129
   1fc76:	19 f4       	brne	.+6      	; 0x1fc7e <main+0x7e>
   1fc78:	84 e0       	ldi	r24, 0x04	; 4
   1fc7a:	9d d0       	rcall	.+314    	; 0x1fdb6 <putch>
   1fc7c:	99 c0       	rjmp	.+306    	; 0x1fdb0 <main+0x1b0>
   1fc7e:	83 e0       	ldi	r24, 0x03	; 3
   1fc80:	9a d0       	rcall	.+308    	; 0x1fdb6 <putch>
   1fc82:	96 c0       	rjmp	.+300    	; 0x1fdb0 <main+0x1b0>
   1fc84:	82 34       	cpi	r24, 0x42	; 66
   1fc86:	19 f4       	brne	.+6      	; 0x1fc8e <main+0x8e>
   1fc88:	84 e1       	ldi	r24, 0x14	; 20
   1fc8a:	b6 d0       	rcall	.+364    	; 0x1fdf8 <getNch>
   1fc8c:	91 c0       	rjmp	.+290    	; 0x1fdb0 <main+0x1b0>
   1fc8e:	85 34       	cpi	r24, 0x45	; 69
   1fc90:	19 f4       	brne	.+6      	; 0x1fc98 <main+0x98>
   1fc92:	85 e0       	ldi	r24, 0x05	; 5
   1fc94:	b1 d0       	rcall	.+354    	; 0x1fdf8 <getNch>
   1fc96:	8c c0       	rjmp	.+280    	; 0x1fdb0 <main+0x1b0>
   1fc98:	85 35       	cpi	r24, 0x55	; 85
   1fc9a:	99 f4       	brne	.+38     	; 0x1fcc2 <main+0xc2>
   1fc9c:	93 d0       	rcall	.+294    	; 0x1fdc4 <getch>
   1fc9e:	08 2f       	mov	r16, r24
   1fca0:	10 e0       	ldi	r17, 0x00	; 0
   1fca2:	90 d0       	rcall	.+288    	; 0x1fdc4 <getch>
   1fca4:	90 e0       	ldi	r25, 0x00	; 0
   1fca6:	38 2f       	mov	r19, r24
   1fca8:	22 27       	eor	r18, r18
   1fcaa:	20 2b       	or	r18, r16
   1fcac:	31 2b       	or	r19, r17
   1fcae:	83 2f       	mov	r24, r19
   1fcb0:	88 1f       	adc	r24, r24
   1fcb2:	88 27       	eor	r24, r24
   1fcb4:	88 1f       	adc	r24, r24
   1fcb6:	8b bf       	out	0x3b, r24	; 59
   1fcb8:	49 01       	movw	r8, r18
   1fcba:	88 0c       	add	r8, r8
   1fcbc:	99 1c       	adc	r9, r9
   1fcbe:	94 d0       	rcall	.+296    	; 0x1fde8 <verifySpace>
   1fcc0:	77 c0       	rjmp	.+238    	; 0x1fdb0 <main+0x1b0>
   1fcc2:	86 35       	cpi	r24, 0x56	; 86
   1fcc4:	29 f4       	brne	.+10     	; 0x1fcd0 <main+0xd0>
   1fcc6:	84 e0       	ldi	r24, 0x04	; 4
   1fcc8:	97 d0       	rcall	.+302    	; 0x1fdf8 <getNch>
   1fcca:	80 e0       	ldi	r24, 0x00	; 0
   1fccc:	74 d0       	rcall	.+232    	; 0x1fdb6 <putch>
   1fcce:	70 c0       	rjmp	.+224    	; 0x1fdb0 <main+0x1b0>
   1fcd0:	84 36       	cpi	r24, 0x64	; 100
   1fcd2:	09 f0       	breq	.+2      	; 0x1fcd6 <main+0xd6>
   1fcd4:	45 c0       	rjmp	.+138    	; 0x1fd60 <main+0x160>
   1fcd6:	76 d0       	rcall	.+236    	; 0x1fdc4 <getch>
   1fcd8:	75 d0       	rcall	.+234    	; 0x1fdc4 <getch>
   1fcda:	c8 2e       	mov	r12, r24
   1fcdc:	73 d0       	rcall	.+230    	; 0x1fdc4 <getch>
   1fcde:	80 e0       	ldi	r24, 0x00	; 0
   1fce0:	88 16       	cp	r8, r24
   1fce2:	80 ee       	ldi	r24, 0xE0	; 224
   1fce4:	98 06       	cpc	r9, r24
   1fce6:	38 f4       	brcc	.+14     	; 0x1fcf6 <main+0xf6>
   1fce8:	83 e0       	ldi	r24, 0x03	; 3
   1fcea:	f4 01       	movw	r30, r8
   1fcec:	87 bf       	out	0x37, r24	; 55
   1fcee:	e8 95       	spm
   1fcf0:	00 e0       	ldi	r16, 0x00	; 0
   1fcf2:	12 e0       	ldi	r17, 0x02	; 2
   1fcf4:	02 c0       	rjmp	.+4      	; 0x1fcfa <main+0xfa>
   1fcf6:	00 e0       	ldi	r16, 0x00	; 0
   1fcf8:	12 e0       	ldi	r17, 0x02	; 2
   1fcfa:	64 d0       	rcall	.+200    	; 0x1fdc4 <getch>
   1fcfc:	f8 01       	movw	r30, r16
   1fcfe:	81 93       	st	Z+, r24
   1fd00:	8f 01       	movw	r16, r30
   1fd02:	ce 16       	cp	r12, r30
   1fd04:	d1 f7       	brne	.-12     	; 0x1fcfa <main+0xfa>
   1fd06:	f0 e0       	ldi	r31, 0x00	; 0
   1fd08:	8f 16       	cp	r8, r31
   1fd0a:	f0 ee       	ldi	r31, 0xE0	; 224
   1fd0c:	9f 06       	cpc	r9, r31
   1fd0e:	20 f0       	brcs	.+8      	; 0x1fd18 <main+0x118>
   1fd10:	83 e0       	ldi	r24, 0x03	; 3
   1fd12:	f4 01       	movw	r30, r8
   1fd14:	87 bf       	out	0x37, r24	; 55
   1fd16:	e8 95       	spm
   1fd18:	67 d0       	rcall	.+206    	; 0x1fde8 <verifySpace>
   1fd1a:	07 b6       	in	r0, 0x37	; 55
   1fd1c:	00 fc       	sbrc	r0, 0
   1fd1e:	fd cf       	rjmp	.-6      	; 0x1fd1a <main+0x11a>
   1fd20:	f4 01       	movw	r30, r8
   1fd22:	a0 e0       	ldi	r26, 0x00	; 0
   1fd24:	b2 e0       	ldi	r27, 0x02	; 2
   1fd26:	2c 91       	ld	r18, X
   1fd28:	30 e0       	ldi	r19, 0x00	; 0
   1fd2a:	11 96       	adiw	r26, 0x01	; 1
   1fd2c:	8c 91       	ld	r24, X
   1fd2e:	11 97       	sbiw	r26, 0x01	; 1
   1fd30:	90 e0       	ldi	r25, 0x00	; 0
   1fd32:	98 2f       	mov	r25, r24
   1fd34:	88 27       	eor	r24, r24
   1fd36:	82 2b       	or	r24, r18
   1fd38:	93 2b       	or	r25, r19
   1fd3a:	12 96       	adiw	r26, 0x02	; 2
   1fd3c:	0c 01       	movw	r0, r24
   1fd3e:	d7 be       	out	0x37, r13	; 55
   1fd40:	e8 95       	spm
   1fd42:	11 24       	eor	r1, r1
   1fd44:	32 96       	adiw	r30, 0x02	; 2
   1fd46:	83 e0       	ldi	r24, 0x03	; 3
   1fd48:	a0 30       	cpi	r26, 0x00	; 0
   1fd4a:	b8 07       	cpc	r27, r24
   1fd4c:	61 f7       	brne	.-40     	; 0x1fd26 <main+0x126>
   1fd4e:	f4 01       	movw	r30, r8
   1fd50:	e7 be       	out	0x37, r14	; 55
   1fd52:	e8 95       	spm
   1fd54:	07 b6       	in	r0, 0x37	; 55
   1fd56:	00 fc       	sbrc	r0, 0
   1fd58:	fd cf       	rjmp	.-6      	; 0x1fd54 <main+0x154>
   1fd5a:	f7 be       	out	0x37, r15	; 55
   1fd5c:	e8 95       	spm
   1fd5e:	28 c0       	rjmp	.+80     	; 0x1fdb0 <main+0x1b0>
   1fd60:	84 37       	cpi	r24, 0x74	; 116
   1fd62:	a9 f4       	brne	.+42     	; 0x1fd8e <main+0x18e>
   1fd64:	2f d0       	rcall	.+94     	; 0x1fdc4 <getch>
   1fd66:	2e d0       	rcall	.+92     	; 0x1fdc4 <getch>
   1fd68:	b8 2e       	mov	r11, r24
   1fd6a:	2c d0       	rcall	.+88     	; 0x1fdc4 <getch>
   1fd6c:	3d d0       	rcall	.+122    	; 0x1fde8 <verifySpace>
   1fd6e:	cb 2c       	mov	r12, r11
   1fd70:	84 01       	movw	r16, r8
   1fd72:	f8 01       	movw	r30, r16
   1fd74:	86 91       	elpm	r24, Z+
   1fd76:	1f d0       	rcall	.+62     	; 0x1fdb6 <putch>
   1fd78:	0f 5f       	subi	r16, 0xFF	; 255
   1fd7a:	1f 4f       	sbci	r17, 0xFF	; 255
   1fd7c:	ca 94       	dec	r12
   1fd7e:	c9 f7       	brne	.-14     	; 0x1fd72 <main+0x172>
   1fd80:	08 94       	sec
   1fd82:	81 1c       	adc	r8, r1
   1fd84:	91 1c       	adc	r9, r1
   1fd86:	ba 94       	dec	r11
   1fd88:	8b 0c       	add	r8, r11
   1fd8a:	91 1c       	adc	r9, r1
   1fd8c:	11 c0       	rjmp	.+34     	; 0x1fdb0 <main+0x1b0>
   1fd8e:	85 37       	cpi	r24, 0x75	; 117
   1fd90:	41 f4       	brne	.+16     	; 0x1fda2 <main+0x1a2>
   1fd92:	2a d0       	rcall	.+84     	; 0x1fde8 <verifySpace>
   1fd94:	8e e1       	ldi	r24, 0x1E	; 30
   1fd96:	0f d0       	rcall	.+30     	; 0x1fdb6 <putch>
   1fd98:	87 e9       	ldi	r24, 0x97	; 151
   1fd9a:	0d d0       	rcall	.+26     	; 0x1fdb6 <putch>
   1fd9c:	83 e0       	ldi	r24, 0x03	; 3
   1fd9e:	0b d0       	rcall	.+22     	; 0x1fdb6 <putch>
   1fda0:	07 c0       	rjmp	.+14     	; 0x1fdb0 <main+0x1b0>
   1fda2:	81 35       	cpi	r24, 0x51	; 81
   1fda4:	21 f4       	brne	.+8      	; 0x1fdae <main+0x1ae>
   1fda6:	88 e0       	ldi	r24, 0x08	; 8
   1fda8:	19 d0       	rcall	.+50     	; 0x1fddc <watchdogConfig>
   1fdaa:	1e d0       	rcall	.+60     	; 0x1fde8 <verifySpace>
   1fdac:	01 c0       	rjmp	.+2      	; 0x1fdb0 <main+0x1b0>
   1fdae:	1c d0       	rcall	.+56     	; 0x1fde8 <verifySpace>
   1fdb0:	80 e1       	ldi	r24, 0x10	; 16
   1fdb2:	01 d0       	rcall	.+2      	; 0x1fdb6 <putch>
   1fdb4:	53 cf       	rjmp	.-346    	; 0x1fc5c <main+0x5c>

0001fdb6 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1fdb6:	90 91 c0 00 	lds	r25, 0x00C0
   1fdba:	95 ff       	sbrs	r25, 5
   1fdbc:	fc cf       	rjmp	.-8      	; 0x1fdb6 <putch>
  UDR0 = ch;
   1fdbe:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1fdc2:	08 95       	ret

0001fdc4 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1fdc4:	80 91 c0 00 	lds	r24, 0x00C0
   1fdc8:	87 ff       	sbrs	r24, 7
   1fdca:	fc cf       	rjmp	.-8      	; 0x1fdc4 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
   1fdcc:	80 91 c0 00 	lds	r24, 0x00C0
   1fdd0:	84 fd       	sbrc	r24, 4
   1fdd2:	01 c0       	rjmp	.+2      	; 0x1fdd6 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdd4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1fdd6:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fdda:	08 95       	ret

0001fddc <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fddc:	e0 e6       	ldi	r30, 0x60	; 96
   1fdde:	f0 e0       	ldi	r31, 0x00	; 0
   1fde0:	98 e1       	ldi	r25, 0x18	; 24
   1fde2:	90 83       	st	Z, r25
  WDTCSR = x;
   1fde4:	80 83       	st	Z, r24
}
   1fde6:	08 95       	ret

0001fde8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fde8:	ed df       	rcall	.-38     	; 0x1fdc4 <getch>
   1fdea:	80 32       	cpi	r24, 0x20	; 32
   1fdec:	19 f0       	breq	.+6      	; 0x1fdf4 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fdee:	88 e0       	ldi	r24, 0x08	; 8
   1fdf0:	f5 df       	rcall	.-22     	; 0x1fddc <watchdogConfig>
   1fdf2:	ff cf       	rjmp	.-2      	; 0x1fdf2 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fdf4:	84 e1       	ldi	r24, 0x14	; 20
   1fdf6:	df cf       	rjmp	.-66     	; 0x1fdb6 <putch>

0001fdf8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fdf8:	1f 93       	push	r17
   1fdfa:	18 2f       	mov	r17, r24
  do getch(); while (--count);
   1fdfc:	e3 df       	rcall	.-58     	; 0x1fdc4 <getch>
   1fdfe:	11 50       	subi	r17, 0x01	; 1
   1fe00:	e9 f7       	brne	.-6      	; 0x1fdfc <getNch+0x4>
  verifySpace();
   1fe02:	f2 df       	rcall	.-28     	; 0x1fde8 <verifySpace>
}
   1fe04:	1f 91       	pop	r17
   1fe06:	08 95       	ret

0001fe08 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
   1fe08:	80 e0       	ldi	r24, 0x00	; 0
   1fe0a:	e8 df       	rcall	.-48     	; 0x1fddc <watchdogConfig>
  __asm__ __volatile__ (
   1fe0c:	ee 27       	eor	r30, r30
   1fe0e:	ff 27       	eor	r31, r31
   1fe10:	09 94       	ijmp
