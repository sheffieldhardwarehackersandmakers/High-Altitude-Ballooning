
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  2 .stab         00000ba0  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a38  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
    fc00:	11 24       	eor	r1, r1
    fc02:	84 b7       	in	r24, 0x34	; 52
    fc04:	14 be       	out	0x34, r1	; 52
    fc06:	81 ff       	sbrs	r24, 1
    fc08:	fb d0       	rcall	.+502    	; 0xfe00 <appStart>
    fc0a:	85 e0       	ldi	r24, 0x05	; 5
    fc0c:	80 93 81 00 	sts	0x0081, r24
    fc10:	82 e0       	ldi	r24, 0x02	; 2
    fc12:	80 93 c0 00 	sts	0x00C0, r24
    fc16:	88 e1       	ldi	r24, 0x18	; 24
    fc18:	80 93 c1 00 	sts	0x00C1, r24
    fc1c:	86 e0       	ldi	r24, 0x06	; 6
    fc1e:	80 93 c2 00 	sts	0x00C2, r24
    fc22:	80 e1       	ldi	r24, 0x10	; 16
    fc24:	80 93 c4 00 	sts	0x00C4, r24
    fc28:	8e e0       	ldi	r24, 0x0E	; 14
    fc2a:	d4 d0       	rcall	.+424    	; 0xfdd4 <watchdogConfig>
    fc2c:	20 9a       	sbi	0x04, 0	; 4
    fc2e:	26 e0       	ldi	r18, 0x06	; 6
    fc30:	80 e3       	ldi	r24, 0x30	; 48
    fc32:	9c ef       	ldi	r25, 0xFC	; 252
    fc34:	31 e0       	ldi	r19, 0x01	; 1
    fc36:	90 93 85 00 	sts	0x0085, r25
    fc3a:	80 93 84 00 	sts	0x0084, r24
    fc3e:	36 bb       	out	0x16, r19	; 22
    fc40:	b0 9b       	sbis	0x16, 0	; 22
    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
    fc44:	18 9a       	sbi	0x03, 0	; 3
    fc46:	a8 95       	wdr
    fc48:	21 50       	subi	r18, 0x01	; 1
    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
    fc4c:	88 24       	eor	r8, r8
    fc4e:	99 24       	eor	r9, r9
    fc50:	cc 24       	eor	r12, r12
    fc52:	c3 94       	inc	r12
    fc54:	f5 e0       	ldi	r31, 0x05	; 5
    fc56:	df 2e       	mov	r13, r31
    fc58:	e1 e1       	ldi	r30, 0x11	; 17
    fc5a:	ee 2e       	mov	r14, r30
    fc5c:	73 e0       	ldi	r23, 0x03	; 3
    fc5e:	f7 2e       	mov	r15, r23
    fc60:	ad d0       	rcall	.+346    	; 0xfdbc <getch>
    fc62:	81 34       	cpi	r24, 0x41	; 65
    fc64:	89 f4       	brne	.+34     	; 0xfc88 <main+0x88>
    fc66:	aa d0       	rcall	.+340    	; 0xfdbc <getch>
    fc68:	89 83       	std	Y+1, r24	; 0x01
    fc6a:	ba d0       	rcall	.+372    	; 0xfde0 <verifySpace>
    fc6c:	89 81       	ldd	r24, Y+1	; 0x01
    fc6e:	82 38       	cpi	r24, 0x82	; 130
    fc70:	19 f4       	brne	.+6      	; 0xfc78 <main+0x78>
    fc72:	84 e0       	ldi	r24, 0x04	; 4
    fc74:	9c d0       	rcall	.+312    	; 0xfdae <putch>
    fc76:	98 c0       	rjmp	.+304    	; 0xfda8 <main+0x1a8>
    fc78:	81 38       	cpi	r24, 0x81	; 129
    fc7a:	19 f4       	brne	.+6      	; 0xfc82 <main+0x82>
    fc7c:	84 e0       	ldi	r24, 0x04	; 4
    fc7e:	97 d0       	rcall	.+302    	; 0xfdae <putch>
    fc80:	93 c0       	rjmp	.+294    	; 0xfda8 <main+0x1a8>
    fc82:	83 e0       	ldi	r24, 0x03	; 3
    fc84:	94 d0       	rcall	.+296    	; 0xfdae <putch>
    fc86:	90 c0       	rjmp	.+288    	; 0xfda8 <main+0x1a8>
    fc88:	82 34       	cpi	r24, 0x42	; 66
    fc8a:	19 f4       	brne	.+6      	; 0xfc92 <main+0x92>
    fc8c:	84 e1       	ldi	r24, 0x14	; 20
    fc8e:	b0 d0       	rcall	.+352    	; 0xfdf0 <getNch>
    fc90:	8b c0       	rjmp	.+278    	; 0xfda8 <main+0x1a8>
    fc92:	85 34       	cpi	r24, 0x45	; 69
    fc94:	19 f4       	brne	.+6      	; 0xfc9c <main+0x9c>
    fc96:	85 e0       	ldi	r24, 0x05	; 5
    fc98:	ab d0       	rcall	.+342    	; 0xfdf0 <getNch>
    fc9a:	86 c0       	rjmp	.+268    	; 0xfda8 <main+0x1a8>
    fc9c:	85 35       	cpi	r24, 0x55	; 85
    fc9e:	69 f4       	brne	.+26     	; 0xfcba <main+0xba>
    fca0:	8d d0       	rcall	.+282    	; 0xfdbc <getch>
    fca2:	08 2f       	mov	r16, r24
    fca4:	10 e0       	ldi	r17, 0x00	; 0
    fca6:	8a d0       	rcall	.+276    	; 0xfdbc <getch>
    fca8:	90 e0       	ldi	r25, 0x00	; 0
    fcaa:	98 2e       	mov	r9, r24
    fcac:	88 24       	eor	r8, r8
    fcae:	80 2a       	or	r8, r16
    fcb0:	91 2a       	or	r9, r17
    fcb2:	88 0c       	add	r8, r8
    fcb4:	99 1c       	adc	r9, r9
    fcb6:	94 d0       	rcall	.+296    	; 0xfde0 <verifySpace>
    fcb8:	77 c0       	rjmp	.+238    	; 0xfda8 <main+0x1a8>
    fcba:	86 35       	cpi	r24, 0x56	; 86
    fcbc:	29 f4       	brne	.+10     	; 0xfcc8 <main+0xc8>
    fcbe:	84 e0       	ldi	r24, 0x04	; 4
    fcc0:	97 d0       	rcall	.+302    	; 0xfdf0 <getNch>
    fcc2:	80 e0       	ldi	r24, 0x00	; 0
    fcc4:	74 d0       	rcall	.+232    	; 0xfdae <putch>
    fcc6:	70 c0       	rjmp	.+224    	; 0xfda8 <main+0x1a8>
    fcc8:	84 36       	cpi	r24, 0x64	; 100
    fcca:	09 f0       	breq	.+2      	; 0xfcce <main+0xce>
    fccc:	43 c0       	rjmp	.+134    	; 0xfd54 <main+0x154>
    fcce:	76 d0       	rcall	.+236    	; 0xfdbc <getch>
    fcd0:	75 d0       	rcall	.+234    	; 0xfdbc <getch>
    fcd2:	b8 2e       	mov	r11, r24
    fcd4:	73 d0       	rcall	.+230    	; 0xfdbc <getch>
    fcd6:	80 e0       	ldi	r24, 0x00	; 0
    fcd8:	88 16       	cp	r8, r24
    fcda:	80 ee       	ldi	r24, 0xE0	; 224
    fcdc:	98 06       	cpc	r9, r24
    fcde:	30 f4       	brcc	.+12     	; 0xfcec <main+0xec>
    fce0:	f4 01       	movw	r30, r8
    fce2:	f7 be       	out	0x37, r15	; 55
    fce4:	e8 95       	spm
    fce6:	00 e0       	ldi	r16, 0x00	; 0
    fce8:	11 e0       	ldi	r17, 0x01	; 1
    fcea:	02 c0       	rjmp	.+4      	; 0xfcf0 <main+0xf0>
    fcec:	00 e0       	ldi	r16, 0x00	; 0
    fcee:	11 e0       	ldi	r17, 0x01	; 1
    fcf0:	65 d0       	rcall	.+202    	; 0xfdbc <getch>
    fcf2:	f8 01       	movw	r30, r16
    fcf4:	81 93       	st	Z+, r24
    fcf6:	8f 01       	movw	r16, r30
    fcf8:	be 16       	cp	r11, r30
    fcfa:	d1 f7       	brne	.-12     	; 0xfcf0 <main+0xf0>
    fcfc:	f0 e0       	ldi	r31, 0x00	; 0
    fcfe:	8f 16       	cp	r8, r31
    fd00:	f0 ee       	ldi	r31, 0xE0	; 224
    fd02:	9f 06       	cpc	r9, r31
    fd04:	18 f0       	brcs	.+6      	; 0xfd0c <main+0x10c>
    fd06:	f4 01       	movw	r30, r8
    fd08:	f7 be       	out	0x37, r15	; 55
    fd0a:	e8 95       	spm
    fd0c:	69 d0       	rcall	.+210    	; 0xfde0 <verifySpace>
    fd0e:	07 b6       	in	r0, 0x37	; 55
    fd10:	00 fc       	sbrc	r0, 0
    fd12:	fd cf       	rjmp	.-6      	; 0xfd0e <main+0x10e>
    fd14:	f4 01       	movw	r30, r8
    fd16:	a0 e0       	ldi	r26, 0x00	; 0
    fd18:	b1 e0       	ldi	r27, 0x01	; 1
    fd1a:	2c 91       	ld	r18, X
    fd1c:	30 e0       	ldi	r19, 0x00	; 0
    fd1e:	11 96       	adiw	r26, 0x01	; 1
    fd20:	8c 91       	ld	r24, X
    fd22:	11 97       	sbiw	r26, 0x01	; 1
    fd24:	90 e0       	ldi	r25, 0x00	; 0
    fd26:	98 2f       	mov	r25, r24
    fd28:	88 27       	eor	r24, r24
    fd2a:	82 2b       	or	r24, r18
    fd2c:	93 2b       	or	r25, r19
    fd2e:	12 96       	adiw	r26, 0x02	; 2
    fd30:	0c 01       	movw	r0, r24
    fd32:	c7 be       	out	0x37, r12	; 55
    fd34:	e8 95       	spm
    fd36:	11 24       	eor	r1, r1
    fd38:	32 96       	adiw	r30, 0x02	; 2
    fd3a:	82 e0       	ldi	r24, 0x02	; 2
    fd3c:	a0 30       	cpi	r26, 0x00	; 0
    fd3e:	b8 07       	cpc	r27, r24
    fd40:	61 f7       	brne	.-40     	; 0xfd1a <main+0x11a>
    fd42:	f4 01       	movw	r30, r8
    fd44:	d7 be       	out	0x37, r13	; 55
    fd46:	e8 95       	spm
    fd48:	07 b6       	in	r0, 0x37	; 55
    fd4a:	00 fc       	sbrc	r0, 0
    fd4c:	fd cf       	rjmp	.-6      	; 0xfd48 <main+0x148>
    fd4e:	e7 be       	out	0x37, r14	; 55
    fd50:	e8 95       	spm
    fd52:	2a c0       	rjmp	.+84     	; 0xfda8 <main+0x1a8>
    fd54:	84 37       	cpi	r24, 0x74	; 116
    fd56:	b9 f4       	brne	.+46     	; 0xfd86 <main+0x186>
    fd58:	31 d0       	rcall	.+98     	; 0xfdbc <getch>
    fd5a:	30 d0       	rcall	.+96     	; 0xfdbc <getch>
    fd5c:	a8 2e       	mov	r10, r24
    fd5e:	2e d0       	rcall	.+92     	; 0xfdbc <getch>
    fd60:	3f d0       	rcall	.+126    	; 0xfde0 <verifySpace>
    fd62:	ba 2c       	mov	r11, r10
    fd64:	f4 01       	movw	r30, r8
    fd66:	01 c0       	rjmp	.+2      	; 0xfd6a <main+0x16a>
    fd68:	f8 01       	movw	r30, r16
    fd6a:	8f 01       	movw	r16, r30
    fd6c:	0f 5f       	subi	r16, 0xFF	; 255
    fd6e:	1f 4f       	sbci	r17, 0xFF	; 255
    fd70:	84 91       	lpm	r24, Z+
    fd72:	1d d0       	rcall	.+58     	; 0xfdae <putch>
    fd74:	ba 94       	dec	r11
    fd76:	c1 f7       	brne	.-16     	; 0xfd68 <main+0x168>
    fd78:	08 94       	sec
    fd7a:	81 1c       	adc	r8, r1
    fd7c:	91 1c       	adc	r9, r1
    fd7e:	aa 94       	dec	r10
    fd80:	8a 0c       	add	r8, r10
    fd82:	91 1c       	adc	r9, r1
    fd84:	11 c0       	rjmp	.+34     	; 0xfda8 <main+0x1a8>
    fd86:	85 37       	cpi	r24, 0x75	; 117
    fd88:	41 f4       	brne	.+16     	; 0xfd9a <main+0x19a>
    fd8a:	2a d0       	rcall	.+84     	; 0xfde0 <verifySpace>
    fd8c:	8e e1       	ldi	r24, 0x1E	; 30
    fd8e:	0f d0       	rcall	.+30     	; 0xfdae <putch>
    fd90:	86 e9       	ldi	r24, 0x96	; 150
    fd92:	0d d0       	rcall	.+26     	; 0xfdae <putch>
    fd94:	8a e0       	ldi	r24, 0x0A	; 10
    fd96:	0b d0       	rcall	.+22     	; 0xfdae <putch>
    fd98:	07 c0       	rjmp	.+14     	; 0xfda8 <main+0x1a8>
    fd9a:	81 35       	cpi	r24, 0x51	; 81
    fd9c:	21 f4       	brne	.+8      	; 0xfda6 <main+0x1a6>
    fd9e:	88 e0       	ldi	r24, 0x08	; 8
    fda0:	19 d0       	rcall	.+50     	; 0xfdd4 <watchdogConfig>
    fda2:	1e d0       	rcall	.+60     	; 0xfde0 <verifySpace>
    fda4:	01 c0       	rjmp	.+2      	; 0xfda8 <main+0x1a8>
    fda6:	1c d0       	rcall	.+56     	; 0xfde0 <verifySpace>
    fda8:	80 e1       	ldi	r24, 0x10	; 16
    fdaa:	01 d0       	rcall	.+2      	; 0xfdae <putch>
    fdac:	59 cf       	rjmp	.-334    	; 0xfc60 <main+0x60>

0000fdae <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fdae:	90 91 c0 00 	lds	r25, 0x00C0
    fdb2:	95 ff       	sbrs	r25, 5
    fdb4:	fc cf       	rjmp	.-8      	; 0xfdae <putch>
  UDR0 = ch;
    fdb6:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fdba:	08 95       	ret

0000fdbc <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    fdbc:	80 91 c0 00 	lds	r24, 0x00C0
    fdc0:	87 ff       	sbrs	r24, 7
    fdc2:	fc cf       	rjmp	.-8      	; 0xfdbc <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    fdc4:	80 91 c0 00 	lds	r24, 0x00C0
    fdc8:	84 fd       	sbrc	r24, 4
    fdca:	01 c0       	rjmp	.+2      	; 0xfdce <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdcc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    fdce:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fdd2:	08 95       	ret

0000fdd4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdd4:	e0 e6       	ldi	r30, 0x60	; 96
    fdd6:	f0 e0       	ldi	r31, 0x00	; 0
    fdd8:	98 e1       	ldi	r25, 0x18	; 24
    fdda:	90 83       	st	Z, r25
  WDTCSR = x;
    fddc:	80 83       	st	Z, r24
}
    fdde:	08 95       	ret

0000fde0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fde0:	ed df       	rcall	.-38     	; 0xfdbc <getch>
    fde2:	80 32       	cpi	r24, 0x20	; 32
    fde4:	19 f0       	breq	.+6      	; 0xfdec <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fde6:	88 e0       	ldi	r24, 0x08	; 8
    fde8:	f5 df       	rcall	.-22     	; 0xfdd4 <watchdogConfig>
    fdea:	ff cf       	rjmp	.-2      	; 0xfdea <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fdec:	84 e1       	ldi	r24, 0x14	; 20
    fdee:	df cf       	rjmp	.-66     	; 0xfdae <putch>

0000fdf0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdf0:	1f 93       	push	r17
    fdf2:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdf4:	e3 df       	rcall	.-58     	; 0xfdbc <getch>
    fdf6:	11 50       	subi	r17, 0x01	; 1
    fdf8:	e9 f7       	brne	.-6      	; 0xfdf4 <getNch+0x4>
  verifySpace();
    fdfa:	f2 df       	rcall	.-28     	; 0xfde0 <verifySpace>
}
    fdfc:	1f 91       	pop	r17
    fdfe:	08 95       	ret

0000fe00 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    fe00:	80 e0       	ldi	r24, 0x00	; 0
    fe02:	e8 df       	rcall	.-48     	; 0xfdd4 <watchdogConfig>
  __asm__ __volatile__ (
    fe04:	ee 27       	eor	r30, r30
    fe06:	ff 27       	eor	r31, r31
    fe08:	09 94       	ijmp
